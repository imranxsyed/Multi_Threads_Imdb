PROJECT DOCUMENT:


FORKING 						VS 					THREAD


											number of files		time
												1		real	0m0.392s
														user	0m0.081s
														sys	0m0.037s


												2		real	0m0.220s
														user	0m0.095s
														sys	0m0.029s



												4		real	0m0.822s
														user	0m0.234s
														sys	0m0.086s

		

												8		real	0m0.439s
														user	0m0.621s
														sys	0m0.192s



												128		real	0m7.226s
														user	0m11.753s
														sys	0m2.298s



												270		real	0m15.826s
														user	0m26.508s
														sys	0m5.185s



												532          	real	0m25.860s
														user	0m53.095s
														sys	0m17.411s



												1024		real	m57.810s
														user	1m32.995s
														sys	1m17.810d


number of files 	time								

			real	0m0.104s
	1		user	0m0.049s
			sys	0m0.023s



			real	0m0.358s
	2		user	0m0.113s
			sys	0m0.066s




			real	0m0.303s
	4		user	0m0.240s
			sys	0m0.103s


			real	0m0.466s
	8		user	0m0.554s
			sys	0m0.258s




			real	0m3.997s
			user	0m8.798s
	128		sys	0m4.341s





	270		real	0m8.275s
			user	0m19.159s
			sys	0m9.451s




			real	0m14.343s
	532		user	0m34.961s
			sys	0m15.511s




			real	0m23.765s
	1024		user	1m3.454s
			sys	0m25.322s







Forking wins!!!
The reason forking is faster is because it does not have to merge and output the data into the ONE FILE. As soon as fork is finished it just outputs the data into the its designated file where threads merge all the data of the files into one big array and then the main therad outputs the file which takes O(n) time extra





EXTRA CREDIT PART 1:

The program uses the queue data structure to exploit the merging of different files at the same time.
Threads merge into each other and go up the tree, and the main thread outputs the file.


ALGORITHEM:

->We created and implemented a find_cvs_file(). The method takes in the name of the directory that we are trying to open. Method will recursively call itself when a subdirectory is found in the directory. 
->Program iterates through the directory through creation of struct dirent passing the name of DIR pointer of the directory name that was sent to the method. 
->Program will iterate the directory until is reaches the end of the directory, indicated by the NULL termanation
->Using struct stat we can identify whether an object is a subdirectory or not
	->if object is a subdirectory 
		->Pthread_create()
		->thread goes into its function called dir_thread_function where it traverses through the sub directory
		
		->call method check_csv_format() to see if it is  or not a cvs file
			->True?
				->Pthread_create()
				->pthread goes into the function whre it calles sort function to merge the files data 
	->neither a subdirectory not file?
		->do nothing, continue the loop 
->No more items items in working directory?
	-Exit while_loop
		returns to the main function.

-free the dynamically allocated array of ints

SUMMARY:

->Over all out program for this part of the project runs on once main method which is the find_cvs_file()
->The method iterates through a given directory using a while loop looking at each item in the file one by one
->if the item happens to be a subdirectory is threads and calls the function again
->sorting is also done threading
->once there are no more items in directory, the parent waits for all of its children to be done. It known the number of children that it has because everytime is threads the process id of the child is stores and the count of children is stored.
->Sorting is done using merge_sort which was implemented previously


ASSUMPTIONS:

->Only movie.cvs will be used
->movie.cvs will have the same header as in the previous project 
DESIGN:

A simple method was called in main, method threaded when needed to enter subdirectory or sorting of cvs was engaged. The path of the file was generated using stat struct and directory iteration was achived using direc struct, both are provided by C library. Parent stored the ids of all its chidren and waited for all of them to terminate before itself exiting out of the method.


DIFFICULTIES:

	Understanding the resources that are shared between the parent and child, when threading

TESTING PROCEEDURE:
	->Used the intial movie meta_data sorting it by anything other than movie_title, 
	->Trimed each sorted file in order to create multiple cvs files.
	->creates a few subdirectories each with multiple or no nested subdirectories
	->manually counted the number of expected threads 
	->if program number of threads matches my expected number of threads, then success is assummed
FUNCTIONS:

	







Summary:
-> The program takes a csv file and collects the data. Each row represents a struct. A struct has 28 variables, one for each column of the row.
-> The program allocates the Movie array of type structs and places each struct (filled with a row) into the index (the row number).
-> The initial allocation of the Movie Array is 500 (for 500 row), however as the rows reach to the end of the Movie Array, The Movie Array gets reallocated to its double size. (The idea of ArrayList). The program performs final reallocation to erase extra spaces in the movie Array.
-> Then Program uses two different function(valid_values() and invalid_values) to saperate valid moives and invalid movies and sorts the array that has valid values.
-> Then the print_movies function is evoked which first prints out the null movies and then sorted movies

null movies == all movies that have an empty fields on sorting factor. i.e. if movie_title is sorting_factor, then all the movies that do not have 			movie_title will be null_values.

Local Variables used: Movie* Array, int total_num_of_movies, int target=500, Movie* array2,null_values=0,non_null_values;
Global Variables:
	-> char header[] // to store the first line of stdin. i.e color, director_name ...
	-> cahr sort_by[]// to store the determinig factor of sorting. i.e. movie_title, imdb_score


Assumptions: -> The csv file will have the same format as movie_metadata.csv with the same column headings.
	     -> Right number of Parameters are provided that is --> ./sorter -c sort_by.
	     -> Data should not exceed the limit of Systems memory.


Design: 
	->Struct movie for each row
	->Movie array gets allocated to 100 (target)

	-> Runs a while loop till the stdin provied nothing

	-> inside while loop
	
		* reallocates 2*target if the total_num_of_movies is equal to target
		* Tokenizes each field by using SubTokenize function. (i.e. color, director)
		* each tokenized field is placed into its associated variable.
		* then the struct is placed at the appropriate index (total_num_of_movies) of Movie Array 
		* total_num_of_movies increments in the loop. When the loop ends its value is equal to the number of rows


	->Outside while Loop

		* Movie Array gets Reallocated with total_num_of_movies. (freeing extra memory)
		* Movie array_2 gets allocated with the total_num _of_movies
		* array_2 is sent in the function called invalid_values(array_2)
		* if no null values found

			* movie_2 array is freed
			* Movie_Array is sent in the mergeSort function
			* Movie_Array is sent to the print_Movies function
			* returns the main method


		* else


			* movie_2_array is sent to the printing_movie function
			* movie_2 array is sent to the valid_values function where all the values are placed into movie_2 array
			* movie_2 array is sent to the mergesort
			* movie_2 array is sent to the print_Movies function 
			* returns the main method



		* the program ends



Difficulties:

	->Hard-Coding
		* Many of the places all 28 variables had to be hard-coded

	->MergeSort

		*  I needed to figure out how to keep arrays pointing to right location when sending them through function


Testing Proceedure:

	->Reduction

		* had to reduce movie_metadata file to 5 rows to test if the sorting was working properly
		* Checked it for each individual variable.



Functions:

	Subtokenize()

		-> takes a 2 string and the starting index
		-> runs while loop on the first string
		-> if the starting index does not start with quotation marks, the loop runs until it starting index hits comma,,copyting the 			values of starting index to end index  into the second string.
		-> If the starting index does start with quotation marks then the loop runs until the starting index hits another quotation 			marks,copyting the values between the quotation marks into the second string.
		->returns the ending index;

	compare_movies()

		->takes two parameters of movie type
		->global variable named "sort_by" has a value of determining factor of sorting
		->has a set of if/else statements,matches the sort_by, and then compares both of movies' varibale depending on the value of 			sort_by and return the value that indicates which movie should come first


	printMovies()

		-> takes two parameters of type Movie array and total_num_of_movies
		-> Prints the header varibale
		-> runs the loop total_num_of_movies times printing values of movie array at each index.
		-> returns void


	invalid_values()

		-> takes four parameters. two of Movie Array type and two integers
		-> runs the loop on the Movie Array that has all the movies(rows) and determines if each row should be a null value
		-> if yes
			* the movie is places into the second array 
		->else 
			*loop contniues
		-> returns integer value that indicates the number of null values.


	valid_values()

		-> takes four parameters. two of Movie Array type and two integers
		-> runs the loop on the Movie Array that has all the movies(rows) and determines if each row should be a null value
		-> if no
			* the movie is places into the second array 
		->else 
			*loop contniues
		-> returns the function.


	trim()

		-> takes a string as a parameter
		-> trims any leading or trailing white spaces.


	MergeSort()

		-> takes two parameter , Movie and the size
		-> if size is 1 or less the function returns 
		->else :

			* makes a left array/s
			* calls the copy function

			* makes a right array of size/s
			* calls the copy function


		-> then calls sort function on left and right .


	Copy()

		->takes four  parameters two of type Movie, two of type integer (start and end)
		-> runs (start-end) times, copying the value of the first arrays at indexes between start and end to second array
		->returns;



	Sort()

		-> takes four parameters 3 of type Movie, and the size
		-> Merges first and second array in appropriate order and puts the values into the third array
		->returns.


	MAN INSTRUCTIONS

		cat INPUT_FILE.CSV|sorter.c - TAKES 2 ARGUMENT AND READS INPUT FROM STDIN (-C, SORT_BY)



		SORT_BY - String from any of the columns from first row	

		INPUT_FILE - has to be  a csv format file that should be sent to Program through STDIN














