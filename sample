#include<stdio.h>

#include<string.h>
#include<stdlib.h>
#include<ctype.h>
#include<math.h>
#include <sys/types.h>
#include<sys/stat.h>
#include <unistd.h>
#include <dirent.h>



#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include <sys/types.h>
#include<sys/stat.h>
#include <unistd.h>
#include <dirent.h>
struct names{

    char file[400];
    char dir[400];


};

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
int * numbers;
int n_index=0;
int index = 0;


void find_csv_files(char[]);



void* my_func(void * ptr){


    struct names * na  = (struct names *) ptr;
    strcat(na->dir, "\\");
    strcat(na->dir, na->file);
   // printf("the file name is: %s\n", na->dir);
   find_csv_files(na->dir);


    /*char ** nc = (char **) cast;

    printf("%s\n", nc[0]);
    //printf("%s\n", nc[1]);

*/

    pthread_exit(NULL);
}



void find_csv_files(char file_name[]){



   // printf("file name is: %s\n", file_name);

    FILE* my_file = fopen(file_name, "r");
    char line[10];


    pthread_mutex_lock(&lock);
    while ( fgets(line,10,my_file) ){


        numbers[n_index] = atoi(line);
        n_index++;
    }
    pthread_mutex_unlock(&lock);

    return;


}



int main(void){


    numbers = (int *)malloc(sizeof(int)*7);

    char initial_dir_name[1048] = "C:\\users\\imran\\Desktop\\dirs";
    printf("Initial Dir: %s\n",initial_dir_name);


    DIR *director;
    director = opendir(initial_dir_name);




    if (!director){
        printf("Initial Dir Invalid\n");
        return -1;
    }



    struct dirent *each_dir;

    pthread_t * ts;
    ts = (pthread_t *) malloc(sizeof(pthread_t)*5);




    struct names * ptr;
    ptr = (struct names *)malloc(sizeof(struct names)* 5);


    while ((each_dir = readdir(director))!=NULL){

        if (each_dir->d_name[0] != '.'){


           struct names st;

           strcpy(st.file, each_dir->d_name);
           strcpy(st.dir,initial_dir_name);
           ptr[index] = st;

           pthread_create(&ts[index],NULL,my_func,&ptr[index]);

           index +=1;






        }
    }

    int k = 0;
    for (k= 0; k <index ; k++){

         printf("number: %d\n", numbers[k]);
        pthread_join(ts[k], NULL);

    }


return 0;

}




